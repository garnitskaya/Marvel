{"version":3,"sources":["components/comicsList/ComicsList.js","components/pages/ComicsPage.js","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"names":["setContent","process","Component","newItemLoading","Spinner","ErrorMessage","Error","ComicsList","useState","comicsList","setComicsList","offset","setOffset","setNewItemLoading","comicsEnded","setComicsEnded","useMarvelService","getAllComics","setProcess","useEffect","onRequest","initial","then","onComicsLoaded","newComicsList","ended","length","className","arr","items","map","item","i","id","thumbnail","title","prices","to","src","alt","renderItems","disabled","style","onClick","ComicsPage","Helmet","name","content","AppBanner","_toConsumableArray","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError"],"mappings":"0NASMA,EAAa,SAACC,EAASC,EAAWC,GACpC,OAAQF,GACJ,IAAK,UACD,OAAO,cAACG,EAAA,EAAD,IACX,IAAK,UACD,OAAOD,EAAiB,cAACD,EAAD,IAAgB,cAACE,EAAA,EAAD,IAC5C,IAAK,YACD,OAAO,cAACF,EAAD,IACX,IAAK,QACD,OAAO,cAACG,EAAA,EAAD,IACX,QACI,MAAM,IAAIC,MAAM,8BA2EbC,EAvEI,WAEf,MAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAA4BF,mBAAS,GAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAA4CJ,oBAAS,GAArD,mBAAOL,EAAP,KAAuBU,EAAvB,KACA,EAAsCL,oBAAS,GAA/C,mBAAOM,EAAP,KAAoBC,EAApB,KAEA,EAA8CC,cAAtCC,EAAR,EAAQA,aAAchB,EAAtB,EAAsBA,QAASiB,EAA/B,EAA+BA,WAE/BC,qBAAU,WACNC,EAAUT,GAAQ,KAEnB,IAEH,IAAMS,EAAY,SAACT,EAAQU,GACbR,GAAVQ,GACAJ,EAAaN,GACRW,KAAKC,GACLD,MAAK,kBAAMJ,EAAW,iBAGzBK,EAAiB,SAACC,GACpB,IAAIC,GAAQ,EACRD,EAAcE,OAAS,IACvBD,GAAQ,GAGZf,GAAc,SAAAD,GAAU,4BAAQA,GAAR,YAAuBe,OAC/CX,GAAkB,GAClBD,EAAUD,EAAS,GACnBI,EAAeU,IA2BnB,OACI,sBAAKE,UAAU,eAAf,UACK3B,EAAWC,GAAS,kBA1BT,SAAC2B,GACjB,IAAMC,EAAQD,EAAIE,KAAI,SAACC,EAAMC,GACzB,IAAQC,EAAiCF,EAAjCE,GAAIC,EAA6BH,EAA7BG,UAAWC,EAAkBJ,EAAlBI,MAAOC,EAAWL,EAAXK,OAC9B,OACI,oBAEIT,UAAU,eAFd,SAGI,eAAC,IAAD,CAAMU,GAAE,kBAAaJ,GAArB,UACI,qBAAKK,IAAKJ,EAAWK,IAAI,eAAeZ,UAAU,qBAClD,qBAAKA,UAAU,oBAAf,SACKQ,IACL,qBAAKR,UAAU,qBAAf,SAAqCS,QANpCJ,MAYjB,OACI,oBAAIL,UAAU,eAAd,SACKE,IAOsBW,CAAY/B,KAAaN,GACpD,wBACIwB,UAAU,mCACVc,SAAUtC,EACVuC,MAAO,CAAE,QAAW5B,EAAc,OAAS,SAC3C6B,QAAS,kBAAMvB,EAAUT,IAJ7B,SAKI,qBAAKgB,UAAU,QAAf,6BCtEDiB,UAfI,WACf,OACI,qCACI,eAACC,EAAA,EAAD,WACI,sBACIC,KAAK,cACLC,QAAQ,iCACZ,mDAEJ,cAACC,EAAA,EAAD,IACA,cAAC,EAAD,S,0FCVG,SAASC,EAAmBrB,GACzC,OCJa,SAA4BA,GACzC,GAAIsB,MAAMC,QAAQvB,GAAM,OAAO,OAAAwB,EAAA,GAAiBxB,GDGzC,CAAkBA,IELZ,SAA0ByB,GACvC,GAAsB,qBAAXC,QAA0BA,OAAOC,YAAYC,OAAOH,GAAO,OAAOH,MAAMO,KAAKJ,GFIvD,CAAgBzB,IAAQ,OAAA8B,EAAA,GAA2B9B,IGLvE,WACb,MAAM,IAAI+B,UAAU,wIHIwE","file":"static/js/7.6e084cbf.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport useMarvelService from './../../services/MarvelService';\r\n\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport Spinner from '../spinner/Spinner';\r\n\r\nimport './comicsList.scss';\r\n\r\nconst setContent = (process, Component, newItemLoading) => {\r\n    switch (process) {\r\n        case 'waiting':\r\n            return <Spinner />;\r\n        case 'loading':\r\n            return newItemLoading ? <Component /> : <Spinner />;//если грузятся новые элементы, то рендерим компонент, если нет, то это первая загрузка и рендерим спиннер \r\n        case 'confirmed':\r\n            return <Component />;\r\n        case 'error':\r\n            return <ErrorMessage />;\r\n        default:\r\n            throw new Error('Unexpected process state');\r\n    }\r\n}\r\n\r\nconst ComicsList = () => {\r\n\r\n    const [comicsList, setComicsList] = useState([]);\r\n    const [offset, setOffset] = useState(0);\r\n    const [newItemLoading, setNewItemLoading] = useState(false);\r\n    const [comicsEnded, setComicsEnded] = useState(false);\r\n\r\n    const { getAllComics, process, setProcess } = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        onRequest(offset, true);\r\n        // eslint-disable-next-line\r\n    }, []);\r\n\r\n    const onRequest = (offset, initial) => {\r\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\r\n        getAllComics(offset)\r\n            .then(onComicsLoaded)\r\n            .then(() => setProcess('confirmed'));\r\n    }\r\n\r\n    const onComicsLoaded = (newComicsList) => {\r\n        let ended = false;\r\n        if (newComicsList.length < 8) {\r\n            ended = true;\r\n        }\r\n\r\n        setComicsList(comicsList => [...comicsList, ...newComicsList]);\r\n        setNewItemLoading(false);\r\n        setOffset(offset + 8);\r\n        setComicsEnded(ended);\r\n    }\r\n\r\n    const renderItems = (arr) => {\r\n        const items = arr.map((item, i) => {\r\n            const { id, thumbnail, title, prices } = item;\r\n            return (\r\n                <li\r\n                    key={i}\r\n                    className=\"comics__item\">\r\n                    <Link to={`/comics/${id}`}>\r\n                        <img src={thumbnail} alt=\"ultimate war\" className=\"comics__item-img\" />\r\n                        <div className=\"comics__item-name\">\r\n                            {title}</div>\r\n                        <div className=\"comics__item-price\">{prices}</div>\r\n                    </Link>\r\n                </li>\r\n            )\r\n        })\r\n\r\n        return (\r\n            <ul className=\"comics__grid\">\r\n                {items}\r\n            </ul>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"comics__list\">\r\n            {setContent(process, () => renderItems(comicsList), newItemLoading)}\r\n            <button\r\n                className=\"button button__main button__long\"\r\n                disabled={newItemLoading}\r\n                style={{ 'display': comicsEnded ? 'none' : 'block' }}\r\n                onClick={() => onRequest(offset)}>\r\n                <div className=\"inner\">load more</div>\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ComicsList;","import { Helmet } from 'react-helmet';\r\nimport AppBanner from './../appBanner/AppBanner';\r\nimport ComicsList from './../comicsList/ComicsList';\r\n\r\nconst ComicsPage = () => {\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Page with list of our comics\" />\r\n                <title>Comics page</title>\r\n            </Helmet>\r\n            <AppBanner />\r\n            <ComicsList />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ComicsPage;","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"sourceRoot":""}