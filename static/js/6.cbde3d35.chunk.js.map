{"version":3,"sources":["components/errorBoundary/ErrorBoundary.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/charSearchForm/CharSearchForm.js","resources/img/vision.png","components/pages/MainPage.js","components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js"],"names":["ErrorBoundary","state","error","err","errorInfo","console","log","this","setState","ErrorMessage","props","children","Component","View","data","name","description","thumbnail","homepage","wiki","imgStyle","className","src","alt","style","href","RandomChar","useState","char","setChar","useMarvelService","getCharacter","clearError","process","setProcess","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","setContent","onClick","mjolnir","CharList","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","elements","useMemo","Spinner","Error","arr","items","map","i","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","to","renderItem","disabled","comics","resourceURI","comicId","match","CharInfo","charId","CharSearchForm","getCharacterByName","errorMessage","results","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","component","MainPage","selectedChar","Helmet","content","decoration","img","display","margin","request","useCallback","url","a","method","body","headers","fetch","response","ok","status","json","useHttp","_apiBase","_apiKey","res","_transformCharacter","getAllComics","_transformComics","getComic","slice","path","extension","urls","title","prices","price","pageCount","language","textObjects","Skeleton"],"mappings":"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","file":"static/js/6.cbde3d35.chunk.js","sourcesContent":["import { Component } from 'react';\r\nimport ErrorMessage from './../errorMessage/ErrorMessage';\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    //static getDelivedStateFromError(error) {//обновляет состояние\r\n    //    return { error: true };\r\n    //}\r\n\r\n    componentDidCatch(err, errorInfo) {//err- ошибка, errorInfo- объект с ключом componentStack, содержащий информацию о компоненте, в котором произошла ошибка.\r\n        console.log(err, errorInfo);\r\n        this.setState({ error: true })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage />\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useEffect, useState } from 'react';\r\nimport useMarvelService from './../../services/MarvelService';\r\n\r\nimport mjolnir from '../../resources/img/mjolnir.png';\r\nimport setContent from './../../utils/setContent';\r\n\r\nimport './randomChar.scss';\r\n\r\nconst RandomChar = () => {\r\n\r\n    const [char, setChar] = useState({});\r\n\r\n    const { getCharacter, clearError, process, setProcess } = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateChar();\r\n        const timerId = setInterval(updateChar, 3000000);\r\n\r\n        return () => {\r\n            clearInterval(timerId);\r\n        }\r\n        // eslint-disable-next-line\r\n    }, [])\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n\r\n    const updateChar = () => {\r\n        clearError();\r\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);//Math.random() * (max - min) + min; получение случайного числа в определенном промежутке\r\n        getCharacter(id)\r\n            .then(onCharLoaded)//аргумент который прийдёт в then, автоматически подставится в ф-цию onCharLoaded\r\n            .then(() => setProcess('confirmed'));\r\n    }\r\n\r\n    return (\r\n        <div className=\"randomchar\" >\r\n            {setContent(process, View, char)}\r\n            <div className=\"randomchar__static\">\r\n                <p className=\"randomchar__title\">\r\n                    Random character for today!<br />\r\n                    Do you want to get to know him better?\r\n                </p>\r\n                <p className=\"randomchar__title\">\r\n                    Or choose another one\r\n                </p>\r\n                <button className=\"button button__main\">\r\n                    <div className=\"inner\"\r\n                        onClick={updateChar}>try it</div>\r\n                </button>\r\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst View = ({ data }) => {\r\n    const { name, description, thumbnail, homepage, wiki } = data;\r\n\r\n    let imgStyle = { 'objectFit': 'cover' };\r\n    if (thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\") {\r\n        imgStyle = { 'objectFit': 'contain' };\r\n    }\r\n\r\n    return (\r\n        <div className=\"randomchar__block\">\r\n            <img src={thumbnail} alt=\"Random character\" className='randomchar__img' style={imgStyle} />\r\n            <div className=\"randomchar__info\">\r\n                <p className=\"randomchar__name\">{name}</p>\r\n                <p className=\"randomchar__descr\">{description}</p>\r\n                <div className=\"randomchar__btns\">\r\n                    <a href={homepage} className=\"button button__main\">\r\n                        <div className=\"inner\">homepage</div>\r\n                    </a>\r\n                    <a href={wiki} className=\"button button__secondary\">\r\n                        <div className=\"inner\">Wiki</div>\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RandomChar;","import { useEffect, useMemo, useRef, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { PropTypes } from 'prop-types';\r\n\r\nimport useMarvelService from './../../services/MarvelService';\r\nimport Spinner from './../spinner/Spinner';\r\nimport ErrorMessage from './../errorMessage/ErrorMessage';\r\n\r\nimport './charList.scss';\r\n\r\nconst setContent = (process, Component, newItemLoading) => {\r\n    switch (process) {\r\n        case 'waiting':\r\n            return <Spinner />;\r\n        case 'loading':\r\n            return newItemLoading ? <Component /> : <Spinner />;//если грузятся новые элементы, то рендерим компонент, если нет, то это первая загрузка и рендерим спиннер \r\n        case 'confirmed':\r\n            return <Component />;\r\n        case 'error':\r\n            return <ErrorMessage />;\r\n        default:\r\n            throw new Error('Unexpected process state');\r\n    }\r\n}\r\n\r\nconst CharList = (props) => {\r\n\r\n    const [charList, setCharList] = useState([]);\r\n    const [newItemLoading, setNewItemLoading] = useState(false);\r\n    const [offset, setOffset] = useState(210);\r\n    const [charEnded, setCharEnded] = useState(false);\r\n\r\n    const { getAllCharacters, process, setProcess } = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        onRequest(offset, true);\r\n        // eslint-disable-next-line\r\n    }, [])\r\n\r\n    const onRequest = (offset, initial) => {\r\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\r\n\r\n        getAllCharacters(offset)\r\n            .then(onCharListLoaded)\r\n            .then(() => setProcess('confirmed'));\r\n    }\r\n\r\n    const onCharListLoaded = (newCharList) => { //персонажи загрузились(успешная загрузка)\r\n        let ended = false;\r\n        if (newCharList.length < 9) {\r\n            ended = true;\r\n        }\r\n\r\n        setCharList(charList => [...charList, ...newCharList]); //при первом запуске будет пустой массив, при последующих-к старым данным будут добавляться новые элементы, которые будут складываться в один массив\r\n        setNewItemLoading(newItemLoading => false);\r\n        setOffset(offset => offset + 9);\r\n        setCharEnded(charEnded => ended);\r\n    }\r\n\r\n    const itemRefs = useRef([]);\r\n\r\n    const focusOnItem = (id) => {\r\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\r\n        itemRefs.current[id].classList.add('char__item_selected');\r\n        itemRefs.current[id].focus();\r\n    }\r\n\r\n    const renderItem = (arr) => {\r\n        const items = arr.map((item, i) => {\r\n            const { id, name, thumbnail } = item;\r\n            let imgStyle = { 'objectFit': 'cover' };\r\n            if (thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\") {\r\n                imgStyle = { 'objectFit': 'unset' };\r\n            }\r\n\r\n            return (\r\n                <li\r\n                    key={id}\r\n                    className=\"char__item\"\r\n                    tabIndex={0}\r\n                    ref={el => itemRefs.current[i] = el} //все элементы по порядку в этом массиве складываем в дом элемент\r\n                    onClick={() => {\r\n                        props.onCharSelected(id);\r\n                        focusOnItem(i);\r\n                    }}\r\n                    onKeyPress={(e) => {\r\n                        if (e.key === '' || e.key === 'Enter') {\r\n                            props.onCharSelected(id);\r\n                            focusOnItem(i);\r\n                        }\r\n                    }}>\r\n                    <img src={thumbnail} alt=\"abyss\" style={imgStyle} />\r\n                    <Link to={`/characters/${id}`} className=\"char__name\">{name}</Link>\r\n                </li>\r\n            )\r\n        })\r\n        return (\r\n            <ul className=\"char__grid\">\r\n                {items}\r\n            </ul>\r\n        )\r\n    }\r\n\r\n    const elements = useMemo(() => {\r\n        return setContent(process, () => renderItem(charList), newItemLoading);\r\n        // eslint-disable-next-line \r\n    }, [process]);\r\n\r\n    return (\r\n        <div className=\"char__list\">\r\n            {elements}\r\n            <button\r\n                className=\"button button__main button__long\"\r\n                disabled={newItemLoading}\r\n                style={{ 'display': charEnded ? 'none' : 'block' }}\r\n                onClick={() => onRequest(offset)}>\r\n                <div className=\"inner\">load more</div>\r\n            </button>\r\n        </div >\r\n    )\r\n}\r\n\r\nCharList.propTypes = {\r\n    onCharSelected: PropTypes.func.isRequired\r\n}\r\n\r\nexport default CharList;","import { useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport useMarvelService from './../../services/MarvelService';\r\nimport setContent from './../../utils/setContent';\r\n\r\nimport './charInfo.scss';\r\n\r\nconst CharInfo = (props) => {\r\n\r\n    const [char, setChar] = useState(null);\r\n\r\n    const { getCharacter, clearError, process, setProcess } = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateChar();\r\n        // eslint-disable-next-line\r\n    }, [props.charId])\r\n\r\n    const updateChar = () => {\r\n        const { charId } = props;\r\n        if (!charId) {\r\n            return; //если нет id, то останавливаем метод updateChar\r\n        }\r\n\r\n        clearError();\r\n        getCharacter(charId)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess('confirmed'))//в ручную устанавливаем процесс, когда данные установятся в state\r\n    }\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    return (\r\n        <div className=\"char__info\">\r\n            {setContent(process, View, char)}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst View = ({ data }) => {\r\n    const { name, description, thumbnail, homepage, wiki, comics } = data;\r\n\r\n    const extractId = (item) => {\r\n        const idRegExp = /\\/([0-9]*)$/;\r\n        return item.match(idRegExp)[1];\r\n    }\r\n\r\n    let imgStyle = { 'objectFit': 'cover' }\r\n    if (thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\") {\r\n        imgStyle = { 'objectFit': 'unset' }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"char__basics\">\r\n                <img src={thumbnail} alt={name} style={imgStyle} />\r\n                <div>\r\n                    <div className=\"char__info-name\">{name}</div>\r\n                    <div className=\"char__btns\">\r\n                        <a href={homepage} className=\"button button__main\">\r\n                            <div className=\"inner\">homepage</div>\r\n                        </a>\r\n                        <a href={wiki} className=\"button button__secondary\">\r\n                            <div className=\"inner\">Wiki</div>\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"char__descr\">\r\n                {description}\r\n            </div>\r\n            <div className=\"char__comics\">Comics:</div>\r\n            <ul className=\"char__comics-list\">\r\n                {comics.length > 0 ? null : 'There is no comics with this character'}\r\n                {\r\n                    comics.map(({ resourceURI, name }, i) => {\r\n                        // eslint-disable-next-line\r\n                        if (i > 9) return; //если i>9 то верстку не возвращаем\r\n\r\n                        let comicId = extractId(resourceURI)\r\n\r\n                        return (\r\n                            <li key={i} className=\"char__comics-item\">\r\n                                <Link to={`/comics/${comicId}`}>{name}</Link>\r\n                            </li>)\r\n                    })\r\n                }\r\n            </ul>\r\n        </>\r\n    )\r\n}\r\n\r\nCharInfo.propTypes = {\r\n    charId: PropTypes.number\r\n}\r\n\r\nexport default CharInfo;","import { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { ErrorMessage as FormikErrorMessage, Field, Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\nimport useMarvelService from './../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './charSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n    const [char, setChar] = useState(null);\r\n    const { clearError, getCharacterByName, process, setProcess } = useMarvelService();\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess('confirmed'));\r\n    }\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char)\r\n    }\r\n\r\n    const errorMessage = process === 'error' ? <div className=\"char__search-error\"><ErrorMessage /></div> : null;\r\n    const results = !char ? null : char.length > 0 ?\r\n        <div className=\"char__search-wrapper\">\r\n            <div className=\"char__search-suspense \">There is! Visit {char[0].name} page? </div>\r\n            <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                <div className=\"inner\">To pace</div>\r\n            </Link>\r\n        </div> :\r\n        <div className=\"char__search-error\">\r\n            The character was not found. Check the name and try again\r\n        </div>;\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues={{\r\n                    charName: ''\r\n                }}\r\n                validationSchema={Yup.object({\r\n                    charName: Yup.string().required('This field is required')\r\n\r\n                })}\r\n                onSubmit={({ charName }) => {\r\n                    updateChar(charName);\r\n                }}>\r\n                <Form>\r\n                    <label htmlFor=\"charName\" className=\"char__search-label\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field\r\n                            id=\"charName\"\r\n                            type=\"text\"\r\n                            name=\"charName\"\r\n                            placeholder=\"Enter name\" />\r\n                        <button\r\n                            className=\"button button__main\"\r\n                            type=\"submit\"\r\n                            disabled={process === 'loading'}>\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage name=\"charName\" component=\"div\" className=\"char__search-error\" />\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default CharSearchForm;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from 'react';\r\nimport { Helmet } from 'react-helmet';\r\n\r\nimport ErrorBoundary from './../errorBoundary/ErrorBoundary';\r\nimport RandomChar from './../randomChar/RandomChar';\r\nimport CharList from './../charList/CharList';\r\nimport CharInfo from './../charInfo/CharInfo';\r\nimport CharSearchForm from '../charSearchForm/CharSearchForm';\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n\r\n    const [selectedChar, setChar] = useState(null);\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Marvel information portal\" />\r\n                <title>Marvel information portal</title>\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar />\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected} />\r\n                </ErrorBoundary>\r\n                <div>\r\n                    <ErrorBoundary>\r\n                        <CharInfo charId={selectedChar} />\r\n                    </ErrorBoundary>\r\n                    <ErrorBoundary>\r\n                        <CharSearchForm />\r\n                    </ErrorBoundary>\r\n                </div>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;","export default __webpack_public_path__ + \"static/media/error.f86da037.gif\";","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img src={img} alt=\"Error\" style={{ display: 'block', margin: 'auto' }} /> //process.env.PUBLIC_URL + '/erroe.gif'переменная окружения(сылка на папку public + картинка)\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useHttp } from './../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n    const { request, clearError, process, setProcess } = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=3c5498a9e3906f29fcb8095ed269b208';\r\n    const _baseOffset = 210;\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);//что бы переменная сформировалась т.к. асинхронная операция, указываем async/await\r\n        return res.data.results.map(_transformCharacter);//в map передаем callback ф-цию, которая будет чтото делать с каждым эл который приходит к ней по очеди с res и формировать массив с объектами\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);//что бы переменная сформировалась т.к. асинхронная операция, указываем async/await\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 200)}...` : 'There is no description for this character',\r\n            thumbnail: `${char.thumbnail.path}.${char.thumbnail.extension}`,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            thumbnail: `${comics.thumbnail.path}.${comics.thumbnail.extension}`,\r\n            prices: comics.prices[0].price === 0 ? 'NOT AVAILABLE' : `${comics.prices[0].price}$`,\r\n            description: comics.description || 'There is no description',\r\n            pageCount: comics.pageCount || 'No information about the number of pages',\r\n            language: comics.textObjects.language || 'en-us'\r\n        }\r\n    }\r\n\r\n    return {\r\n        clearError,\r\n        process,\r\n        setProcess,\r\n        getAllCharacters,\r\n        getCharacter,\r\n        getAllComics,\r\n        getComic,\r\n        getCharacterByName\r\n    };\r\n}\r\n\r\nexport default useMarvelService;","import { useCallback, useState } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [process, setProcess] = useState('waiting'); //начальное состояние ожидающий\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = { 'Content-Type': 'application/ json' }) => {\r\n\r\n        setProcess('loading'); //загрузка данных\r\n\r\n        try {\r\n            const response = await fetch(url, { method, body, headers });\r\n\r\n            if (!response.ok) {// если с запросом  что то не так пошло\r\n                throw new Error(`Could not fetch ${url}, status:${response.status}`);// выкидываем ошибку\r\n            }\r\n\r\n            const data = await response.json();\r\n            return data;\r\n        } catch (e) {\r\n            setProcess('error');\r\n            throw e;\r\n        }\r\n\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => {\r\n        setProcess('loading'); //получение новых данных\r\n    }, []);\r\n\r\n    return { request, clearError, process, setProcess };\r\n}","import './skeleton.scss';\r\n\r\nconst Skeleton = () => {\r\n    return (\r\n        <>\r\n            <p className=\"char__select\">Please select a character to see information</p>\r\n            <div className=\"skeleton\">\r\n                <div className=\"pulse skeleton__header\">\r\n                    <div className=\"pulse skeleton__circle\"></div>\r\n                    <div className=\"pulse skeleton__mini\"></div>\r\n                </div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Skeleton;","import Skeleton from './../components/skeleton/Skeleton';\r\nimport Spinner from './../components/spinner/Spinner';\r\nimport ErrorMessage from './../components/errorMessage/ErrorMessage';\r\n\r\n\r\nconst setContent = (process, Component, data) => {\r\n    switch (process) {\r\n        case 'waiting':\r\n            return <Skeleton />;\r\n        case 'loading':\r\n            return <Spinner />;\r\n        case 'confirmed':\r\n            return <Component data={data} />;\r\n        case 'error':\r\n            return <ErrorMessage />;\r\n        default:\r\n            throw new Error('Unexpected process state');\r\n    }\r\n}\r\n\r\nexport default setContent;"],"sourceRoot":""}